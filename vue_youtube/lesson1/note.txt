vue directive: way to connect element from html with vue js
v-on: specific for events (can be custom events or any browser event) e.g.
	v-on:click="<argument/js script> -> bind with the click event which invoke changes in arg or invoke the js script
	short hand: @click
	@keyup.enter -> keyboard event: when press enter (or @keyup.13)
	@keyup.enter="function_name(pass_function_arg)"
	.enter -> modifier e.g. click.right -> only listen to the click of right mouse

Components -> break the whole website into multiple components e.g. login form component, custom input component (and can be reused)
- create a custom tag: <custom-form />
- define a new component after createApp and before app.mount
	app.component("custom-form",{}): where all the options such as data, methods can go in {};
	Also need template option: ``
	variables inside the data of the component must be used inside the defined template
	submit -> refresh page after clicking and send data to the backend -> prevent this by adding submit.prevent and allowing for handling on the front-end
	can add other components by including a components option with list of name

pass data from parent component to children component: 
	v-bind: turn attribute to js that can be passed down to the props object
	short cut for v-bind:label is just :label
pass data from children to parent component:
	computed: object where can input variable as key and create getter and setter function -> return modelValue which can get from the parent componet in the getter part; set -> capture the value by passing value as the argument -> this.$emit() -> emit event that other components can listen to (can be custom event) -> this.$emit("update:modelValue" -> type of event, value -> value passing to the event)
	props are read-only
v-for="str in list" {{ str}} -> also need to add a key prop which is unique at each iterative of the loop
or v-for="(str,i) in list" :key="i"
LIFE CYCLE HOOKS
- Component life cycle: process of coming into and leaving DOM
- hooks: a function that is triggered to run at a specific point in the component life cycle
- hooks can be accessed inside the component with function-like feature e.g. updated(){}, created(){}, etc.
REASONS for using LIFE CYCLE HOOKS:
- Check if user is authorized to view certain components
- API calls by using created and mounted hooks to pull data into app
- initialize events

APP DEMO
package.json -> auto-generated by npm: a manifest of your project, including packages and applications it depens on + metadata. -> npm init
	- Metadata: name, version, description, etc.
	- devDependencies and dependencies sections -> npm install
	- npm init -> prompt input for name, version,etc...
	- npm install <module> --save (add to the dependencies) --save-dev (add to dev dependencies)
	- scripts: e.g. npm run sass -> compile style; npm run serve -> start server -> start running by npm start
v-model.number: automatically typecast input as a number

Reuse a block of html -> put it in template and package as an app.component.

Access parent method: this.$parent.someMethod() -> use $parent then can call any method that exists in the parent.

print format number: number.toFixed(2)

passing parent data to child component:
v-model:modelValue="name" or just v-model="name"
props:["modelValue"] or props:{modelValue:{type: String, default:"",required:true}}
computed:{childValue:{get:(){return this.modelValue}}}

HTML tag for table:


HTML tag for table:
<table></table>
row: <tr></tr>
cell heading: <th></th>
cel column: <td></td>
